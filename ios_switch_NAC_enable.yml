- name: "Demonstrate connecting to switches" 
  hosts: ios
  vars:
     connection: network_cli
     host_key_auto_add: yes
  gather_facts: no
  

  tasks:
    - name: Gather facts about Switch
      ios_facts:
        gather_subset: "all"
      register: ios_facts


    - name: Change facts into useable objects
      set_fact:
        facts_interfaces: "{{ ios_facts | json_query('ansible_facts.ansible_net_interfaces') }} "
        facts_ios_config: "{{ ios_facts | json_query('ansible_facts.ansible_net_config') }} "    
        facts_neigbors: "{{ ios_facts | json_query('ansible_facts.ansible_net_neighbors') }}"
        # Use parse_cli to get interfaces with mode en vlans (access, native and voice)
        parsed_config_interfaces: "{{ ios_facts | json_query('ansible_facts.ansible_net_config') | parse_cli('interface_config_parser.yml')}}"
        NonNACVLANs: [1830, 1850, 1827, 1831]


    - name: Parse some variables...BAN_neighbors  & NAC_Ports....(jinja)
      set_fact:
        # Find uplinking BAN Switch based on Neighbors
        BAN_neighbors: | 
                            {% set res = [] -%}
                            {% set BAN = '' -%}
                            {% for interface in facts_neigbors.keys() -%}
                                {% if (facts_neigbors[interface][0].host is not none) and (facts_neigbors[interface][0].host[:3]=='BAN') -%} 
                                {% set BAN = facts_neigbors[interface][0].host | regex_replace('BAN-(.)-.+','\\1') -%}
                                    {% set  ignored = res.extend([{'Local_port': interface, 'Neighbor': facts_neigbors[interface][0].host | regex_replace('(\()\w+(\))',''), 'Remote_port': facts_neigbors[interface][0].port, 'BAN': facts_neigbors[interface][0].host | regex_replace('BAN-(.)-.+','\\1') }]) -%}
                                {% endif -%} 
                            {%- endfor %}
                            {{ res }}
        # Get access ports and access vlan (defaulting to 1) and filter ports with VLANs in NonNACVLANs
        NAC_Ports: |
                  {% set res = [] -%}
                  {% for interface in parsed_config_interfaces -%}
                        {% if interface.mode == 'access' -%}
                            {% if interface.access_vlan is not none -%}
                                {% if interface.access_vlan not in NonNACVLANs -%}
                                    {% set ignored = res.extend([{ 'name': interface.name, 'vlan': interface.access_vlan }]) -%}
                                {% endif -%}
                            {% else -%}
                                {% set ignored = res.extend([{ 'name': interface.name, 'vlan': 1 }]) -%}
                            {% endif -%}
                        {% endif -%}
                  {%- endfor %}
                  {{ res }}


    - debug: msg="{{ NAC_Ports }}"
  
    - name: Find neighboring BAN
      set_fact: 
        BAN: "{% if BAN_neighbors | json_query('[*].BAN') | unique | length == 1 -%}{% set ignored = BAN_neighbors | json_query('[*].BAN') | unique  %}{{ ignored[0] }}{% else -%}{{ false }}{% endif -%}"
        IP: "{{ ios_facts.ansible_facts.ansible_net_all_ipv4_addresses[0]}}"
        
    - name: Find neighboring BAN (Z) based on IP. Errors expected and ignored by design
      set_fact:         
        BANip: "BAN-Z"
      ignore_errors: yes
      when: IP | ipsubnet('10.0.100.0/23') is defined 
        
    - name: Find neighboring BAN (CS) based on IP. Errors expected and ignored by design
      set_fact:         
        BANip: "BAN-CS"
      ignore_errors: yes
      when: IP | ipsubnet('10.0.96.0/23') is defined
        
    - name: Find neighboring BAN (W) based on IP. Errors expected and ignored by design
      set_fact:         
        BANip: "BAN-W"
      ignore_errors: yes
      when: IP | ipsubnet('10.0.98.0/23') is defined 
        
    - name: Find neighboring BAN (N) based on IP. Errors expected and ignored by design
      set_fact:         
        BANip: "BAN-N"
      ignore_errors: yes
      when: IP | ipsubnet('10.0.102.0/23') is defined
        
    - name: Find neighboring BAN (R) based on IP. Errors expected and ignored by design
      set_fact:         
        BANip: "BAN-R"
      ignore_errors: yes
      when: IP | ipsubnet('10.0.106.0/23') is defined
      
    # - name: Switch part of 
        # block:
            # - debug: msg = "Niet in BAN-Z"
            # - set_fact:
                # IP: "{{ ios_facts.ansible_facts.ansible_net_all_ipv4_addresses[0] | ipsubnet('10.0.100.0/23') }}"
                # BANip: "Z"
        # rescue:
            # - debug: msg = "Niet in BAN-Z"
            # - set_fact:
                # BANip: "Niets"
        # |
                # {% if (ios_facts.ansible_facts.ansible_net_all_ipv4_addresses[0] | ipaddr ) in ipsubnet('10.0.100.0/23') -%}
                    # "BAN-Z"
                # {% endif -%}
        
        # "{{ ios_facts.ansible_facts.ansible_net_all_ipv4_addresses[0] }}"

    - debug: var=BAN
    - debug: var=BANip
    - debug: var=IP
  